c
result.each {|p| puts p}
result
place.photos.count
place.photos
c
place_id
Photo.mongo_client.database.fs.find.each {|p| puts p}
place_id
mongo_client.database.fs.find(:_id=>place_id).count
mongo_client.database.fs.find(:_id=>place_id)
place_id
n
place_id.is_a?(String)
place_id
n
s
l 180
l180
l
Photo.mongo_client.database.fs.find.each {|p| puts p}
n
Photo.mongo_client.database.fs.find.each {|p| puts p}
n
nn
n
Photo.mongo_client.database.fs.find.each {|p| pp p}
Photo.mongo_client.database.fs.find.each {|p| puts p}
Photo.mongo_client.database.fs.find.count
Photo.mongo_client.database.fs.count
c
Photo.mongo_client.database.fs.find(:_id=>photo.place).first
Photo.mongo_client.database.fs.find(:_id=>photo.id).first
Photo.mongo_client.database.fs.find(photo.id).first
Photo.mongo_client.database.fs.find(:_id=>id).first
Photo.find(photo.id)
n
Photo.find(photo.id)
photo.place
n
photo.place
c
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
c
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
self.class.mongo_client.database.fs.find(:_id=>b_id)
b_id
n
s
n
place
photo.place
Photo.find.count
Photo.all.count
n
Photo.all.count
Photo.find.count
Photo.find(photo.id)
n
Photo.find(photo.id)
photo.place
n
c
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
self.class.mongo_client.database.fs.find(:_id=>b_id)
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
self.class.mongo_client.database.fs.find(:_id=>b_id)
n
s
n
c
self.class.mongo_client.database.fs.find(:_id=>b_id).first
self.class.mongo_client.database.fs.find(:_id=>b_id)
n
self.persisted?
s
n
c
photo.id
Photo.find(photo.id)
n
Photo.find(photo.id)
n
c
mongo_client.database.fs.find
mongo_client.database.fs.find.count
mongo_client.database.fs.count
c
Photo.all.count
n
c
Photo.find(photo.id.to_s)
Photo.all
n
c
Photo.all
Photo.find(photo.id.to_s)
Photo.find(photo.id)
photo
Photo.find(:_id=>b_id).first
n
puts @place
n
self.class.mongo_client.database.fs.find(:_id=>b_id).first
n
b_id
n
s
photo
pp photo.place
photo.place
n
c
puts f[:"metadata.location"]
puts f["metadata.location"]
puts f['metadata.place]
puts f['metadata.location']
f['metadata.location']
puts f[:metadata][:place]
puts f[:metadata][:location]
f["metadata.location"]
f.key?("metadata.location")
f.key?("metadata.locaiton")
f.key?("metadata")
f.key?("metadata.place")
f["metadata.place"]
f=self.class.mongo_client.database.fs.find(:_id=>b_id).first
@place.is_a?(BSON::ObjectId)
@place.is_a(BSON::ObjectId)
puts @place
n
@id.is_a?(String)
n
s
photo.place
n
set_place.id.is_a?(String)
set_place.id
n
set_place.is_a?(Place)
s
place.is_a?(Place)
c
photo.place
n
place_id
n
photo.place
photo_id
n
photo
n
c
photo.place
n
c
n
photo_id
n
photo
n
c
photo.place
place_id
n
set_place.is_a?(BSON::ObjectId)
set_place.is_a?(String)
puts set_place
n
puts set_place
s
c
place_id
photo.place
n
photo.place
photo.id
photo
Photo.all.count
c
loc_hash
update_me
c
result
n
Place.near(phot,max_dist).projection(:_id=>1).first
phot
n
s
c
Place.near(phot,5000).projection(:_id=>1).first
Place.near(phot,5000).projection(:_id=>1)
phot.is_a?(Point)
phot
n
phot
n
c
exit
c
params.key?(:geolocation)
params.key?([:geolocation])
params
params[:lng]
n
params
n
c
Place.all.size
Place.all.first.location
p.location
Place.all.first
c
params
c
params
c
params
c
params
c
params
c
params
c
Place.all.first
Place.all.count
Place.collection.count
c
params
params=params.deep_symbolize_keys
params.deep_symbolize_keys!
params
params.has_key?(:type)
params.key?(:type)
n
p=params.deep_symbolize_keys
puts params
n
s
n
s
n
