c
result.count
c
result.count
result.each{|r| pp r}
c
result.each{|r| puts r}
result.each {|r| pp r}
result.methods?
result.empty?
result.nil?
puts result.to_a
puts result.t_a
c
result.explain
result.to_a
result.find.count
result.count
result.find
result.find.first
n
c
puts result.find().each {|p| puts p}
puts result.find().first
puts result.find.first
puts result.find
puts result.all
puts result.first
puts result
n
c
result.explain
result.view
result.is_a?(Mongo::Collection::View::Aggregation)
result.is_empty?
l 128
l128
l 125
l
result.nil?
result.each {|result| pp result}
result.to_a
result.t_a
pp result
puts result.first
puts result
pp result
result.count
result.nil?
n
c
result.count
l
n
c
result.sort({})
result.sort(nil)
result.sort({sort})
result.sort(sort)
puts sort
sort.nil?
c
sort.nil?
c
sort.nil?
!sort.nil?
puts offset
puts sort
pp sort
c
reload!
puts @formatted_address
puts @id
c
pp params.first
puts params.first
puts params
params.is_a?(Mongo::Collection::View)
c
params.is_a?(Mongo::Collection::View)
params.is_a?(BSON::Collection::View)
c
params.is_a?(BSON::ObjectId)
params[:_id].is_a?(BSON::ObjectId)
c
n
c
n
c
results.size
results.count
n
s
c
value.each {|v| pp v}
c
n
nn
n
v.nil?
v.is_a?(Hash)
n
c
pp results
n
step
l
value.first.is_a?(Array);nil
value.first.is_a?(Hash)
value.is_a?(Mongo::Collection::View)
value.is_a?(Hash)
value.is_a?(Array)
c
puts @address_components.at(0).is_a?(Hash)
puts @address_components.at(0).is_a?(AddressComponent)
puts @address_components.at(0).kind_of?(AddressComponent)
puts @address_components.at(0)
@address_components.kind_of?(Array)
@address_componenets.at(0).kind_of?(AddressComponent)
@address_componenets[0].kind_of?(AddressComponent)
@address_components.kind_of?(Array)
n
c
n
puts @address
@address.kind_of?(Array)
address.kind_of?(Array)
address.kind_of(Array)
@address.kind_of(Array)
@address.is_a(Array)
address.is_a(Array)
address.is_a Array
n
c
puts address_components
n
c
next
step
n
c
puts params[:address_components]
n
exit
n
puts location
n
puts formatted_address
puts id
n
puts params
pp params
p params
n
c
n
puts params
n
puts @p1.longitude
n
puts @longitude
n
puts params
n
puts params
pp params
